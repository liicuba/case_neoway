#Este arquivo contém todas as funções da estrutura do case. 
#Dentro de main podemos ver o arquivo main.go, onde é arquitetado a API e 
onde é chamado as funções de validação descritas no documento de fluxograma anexo na pasta fluxogramas.

#Infelizente não consegui fazer o código funcionar do backend até o banco de dados postgres e nem as classe (funções entre o main.go), conforme pedido,
mas dei o meu melhor em aprender uma linguagem tão interessante como o GO e seu jeito de compilar os arquivos, foi tudo novo para mim, mas uma experiência 
muito imersiva para falar do minimo (rs minhas 300 abas abertas do navegador podem dizer o quanto eu aprendi :).

#Também coloquo aqui os links usados nesta semana para alcanças is resultados. Deixo a história triste de como eu não consegui finalizar para nossa 
reunião presencial. 


###Links usados
 
-https://github.com/jhonyzam/curso_golang/blob/main/aula_4/4%20-%20maps/map_ordenado.go
-https://go.dev/play/ 
-https://pkg.go.dev/fmt
-https://colab.google/
-https://zed.dev/download
-https://echo.labstack.com/docs/cookbook/file-upload#client-1
-https://gorm.io/docs/
-https://chatgpt.com/
-https://pkg.go.dev/regexp
-https://pkg.go.dev/time
-https://pkg.go.dev/net/http
-https://go.dev/dl/


###Algumas instruções de como "rodar"o main para teste que eu usei:

##Para carregar o main.go no bash 
-Vá ate a pasta onde o main esta na sua máquina;
-go mod init relacional_postgresql (no bash, para criar o go.mod (para gerenciamento de dependências em projetos Go))
-go mod tidy  (para baixar modulos adicionais necessarios)
-go run main.go 


#Agradeço a oportunidade de fazer este teste, idependente do resultado, eu aprendi MUITO! ;)

